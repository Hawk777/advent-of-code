#!/usr/bin/env python3

import sys


OP_CPY_REG = 0
OP_CPY_LIT = 1
OP_ADD_LIT = 2
OP_JNZ = 3
OP_JMP = 4

regNames = {"a": 0, "b": 1, "c": 2, "d": 3}


def parse(line):
    if line.startswith("cpy "):
        parts = line[4:].split(" ")
        assert len(parts) == 2
        assert parts[1] in regNames
        if len(parts[0]) == 1 and parts[0] in regNames:
            return (OP_CPY_REG, regNames[parts[0]], regNames[parts[1]])
        else:
            return (OP_CPY_LIT, int(parts[0]), regNames[parts[1]])
    elif line.startswith("inc "):
        assert len(line) == 5
        return (OP_ADD_LIT, 1, regNames[line[4]])
    elif line.startswith("dec "):
        assert len(line) == 5
        return (OP_ADD_LIT, -1, regNames[line[4]])
    elif line.startswith("jnz "):
        parts = line[4:].split(" ")
        assert len(parts) == 2
        if parts[0] in regNames:
            return (OP_JNZ, regNames[parts[0]], int(parts[1]))
        else:
            litValue = int(parts[0])
            return (OP_JMP, int(parts[1]) if litValue != 0 else 1)
    else:
        raise RuntimeError("Bad instruction")


instructions = [parse(line.strip()) for line in sys.stdin]
regValues = [0, 0, 0, 0]
pc = 0
while pc < len(instructions):
    ins = instructions[pc]
    if ins[0] == OP_CPY_REG:
        regValues[ins[2]] = regValues[ins[1]]
        pc += 1
    elif ins[0] == OP_CPY_LIT:
        regValues[ins[2]] = ins[1]
        pc += 1
    elif ins[0] == OP_ADD_LIT:
        regValues[ins[2]] += ins[1]
        pc += 1
    elif ins[0] == OP_JNZ:
        pc += ins[2] if regValues[ins[1]] != 0 else 1
    elif ins[0] == OP_JMP:
        pc += ins[1]
print(regValues[0])

#!/usr/bin/env python3

import collections


deltas = [(1, 0), (-1, 0), (0, 1), (0, -1)]
seed = int(input())


def canStep(x, y):
    if x < 0 or y < 0: return False
    magic = x * x + 3 * x + 2 * x * y + y + y * y + seed
    return bin(magic).count("1") % 2 == 0


costs = {(1, 1): 0}
queue = collections.deque()
queue.append(((1, 1), 0))
while queue:
    sourcePos, sourceCost = queue.popleft()
    for delta in deltas:
        destPos = tuple(sourcePos[i] + delta[i] for i in range(2))
        if canStep(*destPos):
            destCost = sourceCost + 1
            if destPos == (31, 39):
                print(destCost)
                queue.clear()
                break
            elif destPos not in costs:
                costs[destPos] = destCost
                queue.append((destPos, destCost))

countMaxFifty = sum(1 for cost in costs.values() if cost <= 50)
print(countMaxFifty)
